# Main slaspec must define endianess and alignment

define space ram type=ram_space size=4 wordsize=1 default;

define space register type=register_space size=4;

define register offset=0x1000 size=4 [
	r0  r1  r2  r3  r4  r5  r6  r7
	r8  r9 r10 r11 r12  tp  gp  sp
];

define register offset=0x2000 size=4 [
	pc  lp  sar res03
	rpb rpe rpc
];

define register offset=0x00 size=8   contextreg;
define context contextreg
	repeat_end = (0, 4) noflow
#	rpe_ctx = (32, 63) noflow
	rpb_ctx = (32, 63) noflow
;

define token instr(16)
	op0000 = (0, 0)
	op0001 = (0, 1)
	op0003 = (0, 3)
	op0007 = (0, 7)
	op0015 = (0, 15)
	op0102 = (1, 2)
	op0207 = (2, 7)
	op0407 = (4, 7)
	op1215 = (12, 15)
	imm4 = (4, 7)
	simm6 = (2, 7) signed
	imm8 = (0, 7)
	simm8 = (0, 7) signed
	rn = (8, 11)
	rm = (4, 7)
	rl = (0, 3)
	udisp0206 = (2, 6)
	udisp0006 = (0, 6)
	disp7 = (2, 6)
	op0707 = (7, 7)
	op1115 = (11, 15)
	imm5 = (2, 6)
	imm0410 = (4, 10)
	imm0405 = (4, 5)
	op0615 = (6, 15)
	op0815 = (8, 15)
	op0002 = (0, 2)
	imm0307 = (3, 7)
	disp0107 = (1, 7) signed
	disp0111 = (1, 11) signed
	op0103 = (1, 3)
	udisp0106 = (1, 6)
	simm0207 = (2, 7) signed
;

define token ext(16)
	imm1631 = (0, 15)
	simm1631 = (0, 15) signed
;

attach variables [ rn rm rl ] [
	r0  r1  r2  r3  r4  r5  r6  r7
	r8  r9 r10 r11 r12  tp  gp  sp
];

define pcodeop swi;
define pcodeop sleep;

Simm8: "#"^simm8 is simm8 { export *[const]:4 simm8; }

Imm16: "#"^imm1631 is imm1631 { export *[const]:4 imm1631; }
Simm16: "#"^simm1631 is simm1631 { export *[const]:4 simm1631; }

# Control register
Creg: regaddr is op0000 & op0407 [ regaddr = ((op0000 << 4) | op0407) * 4 + 0x2000; ] { export *[register]:4 regaddr; }

RepeatTgt: is rpb_ctx {
	export *[ram]:4 rpb_ctx;
}

# Simulate mep delay slot in repeat/erepeat instructions
:^instruction is repeat_end=2 & instruction [ repeat_end=1; globalset(inst_next, repeat_end); repeat_end=0; globalset(inst_next, rpb_ctx); ] {
	build instruction;
}

:^instruction is repeat_end=1 & instruction & RepeatTgt [ repeat_end=0; ] {
	build instruction;
	goto RepeatTgt;
}

#
#
# Instructions
#
#

#
# Repeats, special handling
#

:erepeat end is op0015=0xe019 ; simm1631 [ rpb_ctx = inst_start + 4; end = inst_start + (simm1631 << 1); repeat_end = 2; globalset(end, repeat_end); globalset(end, rpb_ctx); ] {
	rpb = inst_next;
	rpe = end;
}

#
# Arithmetics/logical 2-operand
#

:sub rn, rm is op0003=4 & op1215=0 & rn & rm {
	rn = rn - rm;
}

:or rn, rm is op0003=0 & op1215=1 & rn & rm {
	rn = rn | rm;
}

:and rn, rm is op0003=1 & op1215=1 & rn & rm {
	rn = rn & rm;
}

:xor rn, rm is op0003=2 & op1215=1 & rn & rm {
	rn = rn ^ rm;
}

#
# 3-arg logic
#

:and3 rn, rm, Imm16 is op0003=5 & op1215=0xC & rn & rm ; Imm16 {
	rn = rm & Imm16;
}

:or3 rn, rm, Imm16 is op0003=4 & op1215=0xC & rn & rm ; Imm16 {
	rn = rm | Imm16;
}

:xor3 rn, rm, Imm16 is op0003=6 & op1215=0xC & rn & rm ; Imm16 {
	rn = rm ^ Imm16;
}

#
# Register, Immediate
#

:sll rn, imm0307 is op0002=6 & op1215=6 & rn & imm0307 {
	rn = rn << imm0307;
}

:srl rn, imm0307 is op0002=2 & op1215=6 & rn & imm0307 {
	rn = rn >> imm0307;
}

:sra rn, imm0307 is op0002=3 & op1215=6 & rn & imm0307 {
	rn = rn s>> imm0307;
}

:add rn, simm0207 is op0001=0 & op1215=6 & rn & simm0207 {
	rn = rn + simm0207;
}

#
# Load/Store reg
#

:lb rn, "("^rm^")" is op0003=0xC & op1215=0 & rn & rm {
	rn = sext(*[ram]:1 rm);
}

:lbu rn, "("^rm^")" is op0003=0xB & op1215=0 & rn & rm {
	rn = zext(*[ram]:1 rm);
}

:sb rn, "("^rm^")" is op0003=0x8 & op1215=0 & rn & rm {
	*[ram]:1 rm = rn;
}

:lh rn, "("^rm^")" is op0003=0xD & op1215=0 & rn & rm {
	rn = sext(*[ram]:2 rm);
}

:lhu rn, "("^rm^")" is op0003=0xF & op1215=0 & rn & rm {
	rn = zext(*[ram]:2 rm);
}

:sh rn, "("^rm^")" is op0003=0x9 & op1215=0 & rn & rm {
	*[ram]:2 rm = rn;
}

:lw rn, "("^rm^")" is op0003=0xE & op1215=0 & rn & rm {
	rn = *[ram]:4 rm;
}

:sw rn, "("^rm^")" is op0003=0xA & op1215=0 & rn & rm {
	*[ram]:4 rm = rn;
}

#
# Load/Store sp-relative
#

:lw rn, off^"(sp)" is op0001=3 & op0707=0 & op1215=4 & rn & udisp0206 [ off = udisp0206 << 2; ] {
	local tgt = sp + off;
	rn = *[ram]:4 tgt;
}

:sw rn, off^"(sp)" is op0001=2 & op0707=0 & op1215=4 & rn & udisp0206 [ off = udisp0206 << 2; ] {
	local tgt = sp + off;
	*[ram]:4 tgt = rn;
}

#
# Load/Store tp-relative
#

:lb rn, udisp0006^"(tp)" is op0707=0 & op1115=0x11 & rn & udisp0006 {
	local tgt = tp + udisp0006;
	rn = sext(*[ram]:1 tgt);
}

:lbu rn, udisp0006^"(tp)" is op0707=1 & op1115=9 & rn & udisp0006 {
	local tgt = tp + udisp0006;
	rn = zext(*[ram]:1 tgt);
}

:sb rn, udisp0006^"(tp)" is op0707=0 & op1115=0x10 & rn & udisp0006 {
	local tgt = tp + udisp0006;
	*[ram]:1 tgt = rn;
}

:lh rn, off^"(tp)" is op0000=0 & op0707=1 & op1115=0x11 & rn & udisp0106 [ off = udisp0106 << 1; ] {
	local tgt = tp + off;
	rn = sext(*[ram]:2 tgt);
}

:lhu rn, off^"(tp)" is op0000=1 & op0707=1 & op1115=0x11 & rn & udisp0106 [ off = udisp0106 << 1; ] {
	local tgt = tp + off;
	rn = zext(*[ram]:2 tgt);
}

:sh rn, off^"(tp)" is op0000=0 & op0707=1 & op1115=0x10 & rn & udisp0106 [ off = udisp0106 << 1; ] {
	local tgt = tp + off;
	*[ram]:2 tgt = rn;
}

:lw rn, off^"(tp)" is op0001=3 & op0707=1 & op1115=8 & rn & udisp0206 [ off = udisp0206 << 2; ] {
	local tgt = tp + off;
	rn = *[ram]:4 tgt;
}

:sw rn, off^"(tp)" is op0001=2 & op0707=1 & op1115=8 & rn & udisp0206 [ off = udisp0206 << 2; ] {
	local tgt = tp + off;
	*[ram]:4 tgt = rn;
}

#
# Load/Store disp16
#

:lb rn, simm1631^"("^rm^")" is op0003=0xC & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	rn = sext(*[ram]:1 tgt);
}

:lbu rn, simm1631^"("^rm^")" is op0003=0xB & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	rn = zext(*[ram]:1 tgt);
}

:sb rn, simm1631^"("^rm^")" is op0003=0x8 & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	*[ram]:1 tgt = rn;
}

:lh rn, simm1631^"("^rm^")" is op0003=0xD & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	rn = sext(*[ram]:2 tgt);
}

:lhu rn, simm1631^"("^rm^")" is op0003=0xF & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	rn = zext(*[ram]:2 tgt);
}

:sh rn, simm1631^"("^rm^")" is op0003=0x9 & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	*[ram]:2 tgt = rn;
}

:lw rn, simm1631^"("^rm^")" is op0003=0xE & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	rn = *[ram]:4 tgt;
}

:sw rn, simm1631^"("^rm^")" is op0003=0xA & op1215=0xC & rn & rm ; simm1631 {
	local tgt = rm + simm1631;
	*[ram]:4 tgt = rn;
}

#
# Load/Store abs24
#

:lw rn, abs24 is op0001=3 & op1215=0xE & rn & op0207 ; imm1631 [ abs24 = (imm1631 << 8) | (op0207 << 2); ] {
	rn = *[ram]:4 abs24:4;
}

:sw rn, abs24 is op0001=2 & op1215=0xE & rn & op0207 ; imm1631 [ abs24 = (imm1631 << 8) | (op0207 << 2); ] {
	*[ram]:4 abs24:4 = rn;
}

#
# Special arithmetics
#

# nor - TODO

:neg rn, rm is op0003=1 & op1215=0 & rn & rm {
	rn = -rm;
}

:abs rn, rm is op0003=1 & op1215=0xF & rn & rm ; imm1631=3 {
	local tmp = (rn - rm);
	if (tmp > 0) goto <skip>;
	tmp = -tmp;
	<skip>
	rn = tmp;
}


:movh rn, Imm16 is op0007=0x21 & op1215=0xC & rn ; Imm16 {
	rn = Imm16 << 16;
}

:add3 rn, rm, Simm16 is op0003=0 & op1215=0xC & rn & rm ; Simm16 {
	rn = rm + sext(Simm16:2);
}

:add3 rl, rn, rm is op1215=9 & rl & rn & rm {
	rl = rn + rm;
}

:add3 rn, "sp", imm is op0001=0 & op0707=0 & op1215=4 & rn & imm5 [ imm = imm5 << 2; ]  {
	rn = sp + imm;
}

:ret is op0015=0x7002 {
	pc = lp;
	return [pc];
}

:mov rn, rm is op0003=0 & op1215=0 & rn & rm {
	rn = rm;
}

:mov rn, Simm8 is op1215=5 & rn & Simm8 {
	rn = Simm8;
}

:ldc rn, Creg is op0103=5 & op1215=7 & rn & Creg {
	rn = Creg;
}

:stc rn, Creg is op0103=4 & op1215=7 & rn & Creg {
	Creg = rn;
}

:movu rn, imm24 is op1115=0x1A & rn & imm8 ; imm1631 [ imm24 = imm8 | (imm1631 << 8); ] {
	rn = imm24;
}

# TODO: sign-extend
:bsr tgt is op0003=9 & op1115=0x1B & imm0410 ; imm1631 [ tgt = inst_start + (((imm0410 << 1) | (imm1631 << 8))); ] {
	lp = inst_next;
	call [tgt:4];
}

:bsr tgt is op0000=1 & op1215=0xB & disp0111 [ tgt = inst_start + (disp0111 << 1); ] {
	lp = inst_next;
	call [tgt:4];
}

:jsr rn is op0003=0xF & op0815=0x10 & rn {
	lp = inst_next;
	call rn;
}

:bra tgt is op0000=0 & op1215=0xB & disp0111 [ tgt = inst_start + (disp0111 << 1); ] {
	goto [tgt:4];
}

:swi imm0405 is op0003=6 & op0615=0x1C0 & imm0405 {
# This is vita-specific
# TODO: check it's actually correct
	r0 = swi(imm0405:4, r1, r2, r3, r4);
}

# Jumps to $11 and $1 are returns (in vita code)
:jmp rm is op0003=0xE & op0815=0x10 & rm & (rm=1 | rm=11) {
	return [rm];
}
# Other jumps are just branches
:jmp rm is op0003=0xE & op0815=0x10 & rm {
	goto [rm];
}

:jmp tgt is op0003=8 & op1115=0x1B & imm0410 ; imm1631 [ tgt = (inst_start & 0xF0000000) | (imm1631 << 8) | (imm0410 << 1); ] {
	pc = tgt;
	goto [pc];
}

:beqz rn, tgt is op0000=0 & op1215=0xA & rn & disp0107 [ tgt = inst_start + (disp0107 << 1); ] {
	if (rn != 0) goto <skip>;
	goto [tgt:4];
	<skip>
}


:beq rn, rm, tgt is op0003=1 & op1215=0xE & rn & rm ; simm1631 [ tgt = inst_start + (simm1631 << 1); ] {
	if (rn != rm) goto <skip>;
	goto [tgt:4];
	<skip>	
}

:bnez rn, tgt is op0000=1 & op1215=0xA & rn & disp0107 [ tgt = inst_start + (disp0107 << 1); ] {
	if (rn == 0) goto <skip>;
	goto [tgt:4];
	<skip>
}

:bnei rn, imm4, tgt is op0003=4 & op1215=0xE & rn & imm4 ; simm1631 [ tgt = inst_start + (simm1631 << 1); ] {
	if (rn == imm4) goto <skip>;
	pc = tgt;
	goto [pc];
	<skip>
}

:blti rn, imm4, tgt is op0003=0xC & op1215=0xE & rn & imm4 ; simm1631 [ tgt = inst_start + (simm1631 << 1); ] {
	if (rn s>= imm4) goto <skip>;
	pc = tgt;
	goto [pc];
	<skip>
}

:bgei rn, imm4, tgt is op0003=0x8 & op1215=0xE & rn & imm4 ; simm1631 [ tgt = inst_start + (simm1631 << 1); ] {
	if (rn s< imm4) goto <skip>;
	pc = tgt;
	goto [pc];
	<skip>
}

:sltu3 "r0", rn, rm is op0003=3 & op1215=0 & rn & rm {
	r0 = zext(rn < rm);
}

:sltu3 "r0", rn, imm0307 is op0002=5 & op1215=6 & rn & imm0307 {
	r0 = zext(rn < imm0307);
}

:sltu3 rn, rm, imm1631 is op0003=3 & op1215=0xC & rn & rm ; imm1631 {
	rn = zext(rm < imm1631);
}

:srl rn, rm is op0003=0xC & op1215=2 & rn & rm {
	rn = rn >> (rm & 0x1F);
}

:sleep is op0015=0x7062 {
	sleep();
}
